package ua.tox1cozz.log4j2patcher

import java.io.File
import java.io.PrintWriter
import java.io.StringWriter
import java.nio.file.Path
import javax.swing.JFileChooser
import javax.swing.JOptionPane
import kotlin.system.exitProcess

fun Path.isTargetClass(fileName: String): Boolean {
    return toString().endsWith(fileName, ignoreCase = true)
}

fun Path.isTargetClass(): Boolean {
    return Patcher.TARGET_CLASSES.any { isTargetClass(it) }
}

fun chooseDir(title: String): Path? {
    val chooser = JFileChooser()
    chooser.currentDirectory = File(".")
    chooser.fileSelectionMode = JFileChooser.DIRECTORIES_ONLY
    chooser.isAcceptAllFileFilterUsed = false
    chooser.dialogTitle = title
    if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
        return chooser.selectedFile.toPath()
    }
    return null
}

fun showInfoMessage(message: String) {
    if (consoleMode) {
        println(message)
    } else {
        JOptionPane.showMessageDialog(
            null,
            message,
            "Information",
            JOptionPane.INFORMATION_MESSAGE
        )
    }
}

fun showErrorMessage(message: String, exception: Throwable? = null, terminate: Boolean = false) {
    if (consoleMode) {
        System.err.println(message)
    } else {
        var formattedMsg = message
        exception?.let {
            val error = StringWriter()
            it.printStackTrace(PrintWriter(error))
            formattedMsg += "\n\nException: $error"
        }
        JOptionPane.showMessageDialog(
            null,
            formattedMsg,
            "Error",
            JOptionPane.ERROR_MESSAGE
        )
    }
    exception?.printStackTrace()
    if (terminate) exitProcess(-1)
}