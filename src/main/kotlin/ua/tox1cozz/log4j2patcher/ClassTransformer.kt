package ua.tox1cozz.log4j2patcher

import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.ClassWriter.COMPUTE_FRAMES
import org.objectweb.asm.ClassWriter.COMPUTE_MAXS
import org.objectweb.asm.Opcodes
import org.objectweb.asm.Opcodes.ACC_PUBLIC
import org.objectweb.asm.tree.ClassNode
import org.objectweb.asm.tree.InsnList
import org.objectweb.asm.tree.InsnNode
import org.objectweb.asm.tree.MethodNode
import java.nio.file.Files
import java.nio.file.Path

object ClassTransformer {

    fun processClassFile(inFile: Path, outFile: Path) {
        val classData = Files.readAllBytes(inFile)
        val classNode = ClassNode()
        val classReader = ClassReader(classData)
        classReader.accept(classNode, 0)

        if (inFile.isTargetClass(Patcher.CLASS_JNDI_LOOKUP)) {
            Log4j2.processJndiLookup(classNode)
        }

        val writer = ClassWriter(COMPUTE_MAXS or COMPUTE_FRAMES)
        classNode.accept(writer)
        Files.write(outFile, writer.toByteArray())
    }

    object Log4j2 {

        fun processJndiLookup(classNode: ClassNode) {
            val methodName = "lookup"
            val methodDesc = "(Lorg/apache/logging/log4j/core/LogEvent;Ljava/lang/String;)Ljava/lang/String;"

            // Remove original method
            classNode.methods.removeIf { it.name == methodName && it.desc == methodDesc }

            // Create dummy method
            val emptyMethod = MethodNode(ACC_PUBLIC, methodName, methodDesc, null, null)
            emptyMethod.instructions = InsnList().apply {
                add(InsnNode(Opcodes.ACONST_NULL))
                add(InsnNode(Opcodes.ARETURN))
            }
            classNode.methods.add(emptyMethod)

            /*classNode.methods.filter {
                it.name == "lookup" && it.desc == "(Lorg/apache/logging/log4j/core/LogEvent;Ljava/lang/String;)Ljava/lang/String;"
            }.forEach { method ->


                val insns = InsnList().apply {
                    add(InsnNode(Opcodes.ACONST_NULL))
                    add(InsnNode(Opcodes.ARETURN))
                }
                method.instructions.insertBefore(method.instructions.first, insns)
            }*/

            println("Patched JNDI Lookup exploit in class: ${classNode.name}")
        }
    }
}